---
source: df_engine_extensions/src/dist_sql_query/resolver.rs
assertion_line: 229
expression: new_plan
---
ProjectionExec: expr=[time@0 as time, tag1@1 as tag1, tag2@2 as tag2, value@3 as value, field2@4 as field2]
  FilterExec: time@0 < 1691974518000 AND tag1@1 = test_tag
    ResolvedPartitionedScan: remote_exec_plans:[(TableIdentifier { catalog: "test_catalog", schema: "test_schema", table: "__test_1" }, UnresolvedSubTableScan { table: TableIdentifier { catalog: "test_catalog", schema: "test_schema", table: "__test_1" }, read_request: ReadRequest { request_id: RequestId(42), opts: ReadOptions { batch_size: 10000, read_parallelism: 8, deadline: None }, projected_schema: ProjectedSchema { original_schema: Schema { timestamp_index: 1, tsid_index: Some(0), column_schemas: ColumnSchemas { columns: [ColumnSchema { id: 1, name: "tsid", data_type: UInt64, is_nullable: false, is_tag: false, is_dictionary: false, comment: "", escaped_name: "tsid", default_value: None }, ColumnSchema { id: 2, name: "time", data_type: Timestamp, is_nullable: false, is_tag: false, is_dictionary: false, comment: "", escaped_name: "time", default_value: None }, ColumnSchema { id: 3, name: "tag1", data_type: String, is_nullable: false, is_tag: true, is_dictionary: false, comment: "", escaped_name: "tag1", default_value: None }, ColumnSchema { id: 4, name: "tag2", data_type: String, is_nullable: false, is_tag: true, is_dictionary: false, comment: "", escaped_name: "tag2", default_value: None }, ColumnSchema { id: 5, name: "value", data_type: Int8, is_nullable: false, is_tag: false, is_dictionary: false, comment: "", escaped_name: "value", default_value: None }, ColumnSchema { id: 6, name: "field2", data_type: Float, is_nullable: false, is_tag: false, is_dictionary: false, comment: "", escaped_name: "field2", default_value: None }] }, version: 1, primary_key_indexes: [0, 1] }, projection: Some([1, 2, 3, 4, 5]) }, predicate: Predicate { exprs: [BinaryExpr(BinaryExpr { left: BinaryExpr(BinaryExpr { left: Column(Column { relation: None, name: "time" }), op: Lt, right: Literal(TimestampMillisecond(1691974518000, None)) }), op: And, right: BinaryExpr(BinaryExpr { left: Column(Column { relation: None, name: "tag1" }), op: Eq, right: Literal(Utf8("test_tag")) }) })], time_range: TimeRange { inclusive_start: Timestamp(-9223372036854775808), exclusive_end: Timestamp(1691974518000) } }, metrics_collector: MetricsCollector { name: "", metrics: Mutex { data: [], poisoned: false, .. }, children: Mutex { data: [], poisoned: false, .. } } } }), (TableIdentifier { catalog: "test_catalog", schema: "test_schema", table: "__test_2" }, UnresolvedSubTableScan { table: TableIdentifier { catalog: "test_catalog", schema: "test_schema", table: "__test_2" }, read_request: ReadRequest { request_id: RequestId(42), opts: ReadOptions { batch_size: 10000, read_parallelism: 8, deadline: None }, projected_schema: ProjectedSchema { original_schema: Schema { timestamp_index: 1, tsid_index: Some(0), column_schemas: ColumnSchemas { columns: [ColumnSchema { id: 1, name: "tsid", data_type: UInt64, is_nullable: false, is_tag: false, is_dictionary: false, comment: "", escaped_name: "tsid", default_value: None }, ColumnSchema { id: 2, name: "time", data_type: Timestamp, is_nullable: false, is_tag: false, is_dictionary: false, comment: "", escaped_name: "time", default_value: None }, ColumnSchema { id: 3, name: "tag1", data_type: String, is_nullable: false, is_tag: true, is_dictionary: false, comment: "", escaped_name: "tag1", default_value: None }, ColumnSchema { id: 4, name: "tag2", data_type: String, is_nullable: false, is_tag: true, is_dictionary: false, comment: "", escaped_name: "tag2", default_value: None }, ColumnSchema { id: 5, name: "value", data_type: Int8, is_nullable: false, is_tag: false, is_dictionary: false, comment: "", escaped_name: "value", default_value: None }, ColumnSchema { id: 6, name: "field2", data_type: Float, is_nullable: false, is_tag: false, is_dictionary: false, comment: "", escaped_name: "field2", default_value: None }] }, version: 1, primary_key_indexes: [0, 1] }, projection: Some([1, 2, 3, 4, 5]) }, predicate: Predicate { exprs: [BinaryExpr(BinaryExpr { left: BinaryExpr(BinaryExpr { left: Column(Column { relation: None, name: "time" }), op: Lt, right: Literal(TimestampMillisecond(1691974518000, None)) }), op: And, right: BinaryExpr(BinaryExpr { left: Column(Column { relation: None, name: "tag1" }), op: Eq, right: Literal(Utf8("test_tag")) }) })], time_range: TimeRange { inclusive_start: Timestamp(-9223372036854775808), exclusive_end: Timestamp(1691974518000) } }, metrics_collector: MetricsCollector { name: "", metrics: Mutex { data: [], poisoned: false, .. }, children: Mutex { data: [], poisoned: false, .. } } } }), (TableIdentifier { catalog: "test_catalog", schema: "test_schema", table: "__test_3" }, UnresolvedSubTableScan { table: TableIdentifier { catalog: "test_catalog", schema: "test_schema", table: "__test_3" }, read_request: ReadRequest { request_id: RequestId(42), opts: ReadOptions { batch_size: 10000, read_parallelism: 8, deadline: None }, projected_schema: ProjectedSchema { original_schema: Schema { timestamp_index: 1, tsid_index: Some(0), column_schemas: ColumnSchemas { columns: [ColumnSchema { id: 1, name: "tsid", data_type: UInt64, is_nullable: false, is_tag: false, is_dictionary: false, comment: "", escaped_name: "tsid", default_value: None }, ColumnSchema { id: 2, name: "time", data_type: Timestamp, is_nullable: false, is_tag: false, is_dictionary: false, comment: "", escaped_name: "time", default_value: None }, ColumnSchema { id: 3, name: "tag1", data_type: String, is_nullable: false, is_tag: true, is_dictionary: false, comment: "", escaped_name: "tag1", default_value: None }, ColumnSchema { id: 4, name: "tag2", data_type: String, is_nullable: false, is_tag: true, is_dictionary: false, comment: "", escaped_name: "tag2", default_value: None }, ColumnSchema { id: 5, name: "value", data_type: Int8, is_nullable: false, is_tag: false, is_dictionary: false, comment: "", escaped_name: "value", default_value: None }, ColumnSchema { id: 6, name: "field2", data_type: Float, is_nullable: false, is_tag: false, is_dictionary: false, comment: "", escaped_name: "field2", default_value: None }] }, version: 1, primary_key_indexes: [0, 1] }, projection: Some([1, 2, 3, 4, 5]) }, predicate: Predicate { exprs: [BinaryExpr(BinaryExpr { left: BinaryExpr(BinaryExpr { left: Column(Column { relation: None, name: "time" }), op: Lt, right: Literal(TimestampMillisecond(1691974518000, None)) }), op: And, right: BinaryExpr(BinaryExpr { left: Column(Column { relation: None, name: "tag1" }), op: Eq, right: Literal(Utf8("test_tag")) }) })], time_range: TimeRange { inclusive_start: Timestamp(-9223372036854775808), exclusive_end: Timestamp(1691974518000) } }, metrics_collector: MetricsCollector { name: "", metrics: Mutex { data: [], poisoned: false, .. }, children: Mutex { data: [], poisoned: false, .. } } } })], partition_count=3

